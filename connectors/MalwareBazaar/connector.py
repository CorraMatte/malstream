import os
import zipfile
from datetime import datetime, timedelta

import requests

from connectors.MalwareBazaar.const import MALWARE_BAZAAR_URL, TMP_ZIP_FOLDER, OUTPUT_ZIP_FOLDER, ZIP_PASSWORD
from connectors.utils import upload_file_to_malstream


def get_last_zipname() -> str:
    last_hour = datetime.utcnow() - timedelta(hours=1)
    return f"{last_hour.strftime('%Y-%m-%d-%H')}.zip"


def download_zip() -> bool:
    r = requests.get(f"{MALWARE_BAZAAR_URL}/{get_last_zipname()}")
    fout_path = os.path.join(TMP_ZIP_FOLDER, get_last_zipname())
    if r.status_code == 200:
        print(f"{get_last_zipname()} downloaded")
        with open(fout_path, 'wb') as fout:
            fout.write(r.content)

    return r.status_code == 200


def main():
    if not download_zip():
        print('Error while downloading archive')
        exit(1)

    zip_file = zipfile.ZipFile(os.path.join(TMP_ZIP_FOLDER, get_last_zipname()))
    zip_file.extractall(path=OUTPUT_ZIP_FOLDER, pwd=ZIP_PASSWORD.encode())

    print(f"Extracting files from {TMP_ZIP_FOLDER}")
    for f in os.listdir(OUTPUT_ZIP_FOLDER):
        status_code = upload_file_to_malstream(os.path.join(OUTPUT_ZIP_FOLDER, f))
        if status_code != 200 and status_code != 409:
            print(f'Error on {f} {status_code}')

    print(f"Cleaning extracted file {TMP_ZIP_FOLDER}")
    for f in os.listdir(TMP_ZIP_FOLDER):
        os.remove(os.path.join(TMP_ZIP_FOLDER, f))


if __name__ == '__main__':
    main()
